(()=>{"use strict";const t=async function(t){const e=await fetch(t);return await e.json()};function e(t){let e="";for(let n=0;n<t.length;n++)e+=` <a href="${t[n]}" class="badge bg-secondary">${n+1}</a> `;return e}const n=function(t,n,a){let d="";return"all"==a?(d=`\n    <tr>\n    <th scope="row">${n+1}</th>\n    <td>${t.title}</td>`,0!=t.docUrl.length?(d+=`\n            <td><a href="${t.docUrl}" class="badge bg-secondary">문서</a>\n            </td>\n            <td>${e(t.links)}</td>\n            <td>${t.date}</td>`,0!=t.gitUrl.length?d+=`<td><a href="${t.gitUrl}" class="badge bg-secondary">git</a>\n            </td>\n            </tr>`:d+="<td></td>\n            </tr>"):(d+=`<td></td>\n            <td>${e(t.links)}</td>\n            <td>${t.date}</td>`,0!=t.gitUrl.length?d+=`<td><a href="${t.gitUrl}" class="badge bg-secondary">git</a>\n            </td>\n            </tr>`:d+="<td></td>\n            </tr>")):"link"==a?0!=t.links.length&&(d=`\n        <tr>\n        <th scope="row">${n+1}</th>\n        <td>${t.title}</td>`,0!=t.docUrl.length?(d+=`\n                <td><a href="${t.docUrl}" class="badge bg-secondary">문서</a>\n                </td>\n                <td>${e(t.links)}</td>\n                <td>${t.date}</td>`,0!=t.gitUrl.length?d+=`<td><a href="${t.gitUrl}" class="badge bg-secondary">git</a>\n                </td>\n                </tr>`:d+="<td></td>\n                </tr>"):(d+=`<td></td>\n                <td>${e(t.links)}</td>\n                <td>${t.date}</td>`,0!=t.gitUrl.length?d+=`<td><a href="${t.gitUrl}" class="badge bg-secondary">git</a>\n                </td>\n                </tr>`:d+="<td></td>\n                </tr>")):"recent"==a?(d=`\n        <tr>\n        <th scope="row">${n+1}</th>\n        <td>${t.title}</td>`,0!=t.docUrl.length?(d+=`\n            <td><a href="${t.docUrl}" class="badge bg-secondary">문서</a>\n            </td>\n            <td>${e(t.links)}</td>\n            <td>${t.date}</td>`,0!=t.gitUrl.length?d+=`<td><a href="${t.gitUrl}" class="badge bg-secondary">git</a>\n            </td>\n            </tr>`:d+="<td></td>\n            </tr>"):(d+=`<td></td>\n            <td>${e(t.links)}</td>\n            <td>${t.date}</td>`,0!=t.gitUrl.length?d+=`<td><a href="${t.gitUrl}" class="badge bg-secondary">git</a>\n            </td>\n            </tr>`:d+="<td></td>\n            </tr>")):0!=t.gitUrl.length&&(d=`\n            <tr>\n            <th scope="row">${n+1}</th>\n            <td>${t.title}</td>\n            <td><a href="${t.docUrl}" class="badge bg-secondary">문서</a>\n            </td>\n            <td>${e(t.links)}</td>\n            <td>${t.date}</td>\n            <td><a href="${t.gitUrl}" class="badge bg-secondary">git</a>\n            </tr>`),d},a=function(t,e){let n="";return"quizall"==e?n=`\n        <tr>\n        <td>${t.title}</td>\n        <td><a href="${t.docUrl}" class="badge bg-secondary">문서</a>\n        </td>\n        <td><a href="${t.previewUrl}" class="badge bg-secondary">previewUrl</a>\n        <td><a href="${t.gitUrl}" class="badge bg-secondary">git</a>\n        </tr>`:0!=t.gitUrl.length&&(n=`\n            <tr>\n            <td>${t.title}</td>\n            <td><a href="${t.docUrl}" class="badge bg-secondary">문서</a>\n            </td>\n            <td><a href="${t.previewUrl}" class="badge bg-secondary">previewUrl</a>\n            <td><a href="${t.gitUrl}" class="badge bg-secondary">git</a>\n            </tr>`),n},d=function(){for(var t,e,n=document.getElementById("class_table"),a=!0;a;){var d;for(a=!1,t=n.rows,d=1;d<t.length-1;d++){e=!1;var r=t[d].getElementsByTagName("td")[3],l=t[d+1].getElementsByTagName("td")[3];if(r.innerHTML<l.innerHTML){e=!0;break}}e&&(t[d].parentNode.insertBefore(t[d+1],t[d]),a=!0)}},r=["./class.json","./quiz.json"],l=document.querySelector(".classBody"),s=document.querySelector(".quizBody"),c=document.querySelector("#class_loading"),i=document.querySelector("#quiz_loading"),g=document.querySelectorAll(".btn");let o="class",u="all",y="quizall";function h(){let e;U(),setTimeout((async function(){c.style.display="none",i.style.display="none";for(let n=0;n<r.length;n++)e=await t(r[n]),$(n,e)}),1e3)}function $(t,e){0!=t?1!=t||(s.innerHTML=e.map((t=>a(t,y))).join("")):l.innerHTML=e.map(((t,e)=>n(t,e,u))).join("")}c.style.display="none",i.style.display="none",h();for(var b=0;b<g.length;b++)g[b].addEventListener("click",(t=>{f(t)}));function f(t){var e;for(e=0;e<g.length;e++)g[e].className=g[e].className.replace(" active","");if(t.currentTarget.className+=" active","all"==t.currentTarget.value||"link"==t.currentTarget.value||"git"==t.currentTarget.value||"recent"==t.currentTarget.value){if(u=t.currentTarget.value,"quizall"==y?g[4].className+=" active":g[5].className+=" active",o="class","recent"==u)return setTimeout((function(){c.style.display="none",i.style.display="none",d()}),1e3),void U()}else y=t.currentTarget.value,"all"==u?g[0].className+=" active":"link"==u?g[1].className+=" active":"git"==u?g[2].className+=" active":g[3].className+=" active",o="quiz";h()}function U(){console.log("-----LOADING-----"),"class"==o?c.style.display="block":i.style.display="block"}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,